{"version":3,"sources":["types/ResourceProxy.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;GAmBG","file":"ResourceProxy.js","sourcesContent":["/**\n * @typedef {object} ResourceProxy A Proxy where calling functions will treat the\n * function name as a Lang string key and act as a ResourceLoader, requiring only\n * the strings TemplateData (or nothing for non-dynamic strings)\n *\n * >TypeScript users can pass a generic type parameter to the ResourceProxy type\n * which will append all the keys of the passed type to the valid keys on the\n * ResourceProxy itself. This makes it easier to get type hinting for custom\n * localization strings. Example:\n * ```\n * type C = {\n *     FOO: any;\n *     BAR: any;\n * };\n * ...\n * let r: ResourceProxy<C> = Lang.createResourceProxy('en_us');\n * return r.FOO(); // `FOO` will be of type `(data?: TemplateData) => string`\n *                 // so this returns a string\n * ```\n */\n\nimport { TemplateData } from '../types/TemplateData';\nimport { BaseStrings } from '..';\n\nexport type ResourceProxy<T = {}> = {\n\t[key in BaseStrings]: (data?: TemplateData) => string\n} & {\n\t[key in keyof T]: (data?: TemplateData) => string\n};\n"],"sourceRoot":"../../src"}